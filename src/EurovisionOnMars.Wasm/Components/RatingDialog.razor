@inject HttpClient Http
@inject IToastService ToastService

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem>
                    <MudNumericField 
                        @bind-Value="category1" 
                        Label="låt" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12" />
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        @bind-Value="category2" 
                        Label="opptreden" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12" />
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        @bind-Value="category3" 
                        Label="mgp-faktor" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="UpdateRating">stem</MudButton>
        <MudButton OnClick="Cancel">avbryt</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public RatingDto Rating { get; set; }

    private int? category1;
    private int? category2;
    private int? category3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.category1 = Rating.Category1;
        this.category2 = Rating.Category2;
        this.category3 = Rating.Category3;
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }

    private async void UpdateRating()
    {
        var ratingRequest = new RatingDto(
            Rating.Id, 
            category1, 
            category2, 
            category3, 
            Rating.PlayerId
        );
        var response = await Http.PutAsJsonAsync<RatingDto>("https://localhost:7195/api/Ratings/", ratingRequest); // TODO: automatically parse url
        if (response.IsSuccessStatusCode)
        {
            Rating = await response.Content.ReadFromJsonAsync<RatingDto>();
            ToastService.ShowSuccess("avstemning lagret");
            Console.WriteLine($"Successfully updated rating with id: {Rating!.Id}");
            Dialog.Close(DialogResult.Ok(true));
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            ToastService.ShowError("man kan gi 1-8, 10 eller 12 poeng, og man kan kun gi 10 og 12 poeng én gang i hver kategori");
            Console.WriteLine($"Failed to update rating");
        }
        else
        {
            ToastService.ShowError("noe gikk galt, prøv igjen");
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
    }
}
