@using EurovisionOnMars.Dto.Requests
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem>
                    <MudNumericField 
                        Value="@category1" 
                        Label="låt" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12" 
                        ValueChanged="(int? newPoints) => HandlePointsChange(category1, newPoints, (points) => category1 = points)"/>
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        Value="@category2" 
                        Label="opptreden" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12"
                        ValueChanged="(int? newPoints) => HandlePointsChange(category2, newPoints, (points) => category2 = points)" />
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        Value="@category3" 
                        Label="mgp-faktor" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12"
                        ValueChanged="(int? newPoints) => HandlePointsChange(category3, newPoints, (points) => category3 = points)" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton 
            Variant="Variant.Filled" Color="Color.Secondary"
            OnClick="UpdateRating">
                stem
        </MudButton>
        <MudIconButton 
            Variant="Variant.Filled" Color="Color.Secondary"
            Icon="@Icons.Material.Filled.Close"
            OnClick="Cancel">
        </MudIconButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public PlayerRatingDto Rating { get; set; }

    private int? category1;
    private int? category2;
    private int? category3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.category1 = Rating.Category1Points;
        this.category2 = Rating.Category2Points;
        this.category3 = Rating.Category3Points;
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }

    private async Task UpdateRating()
    {
        var ratingRequest = CreateRequest();
        if (ratingRequest is null)
        {
            return;
        }

        var response = await Http.PatchAsJsonAsync<RatingPointsRequestDto>($"/api/Ratings/{Rating.Id}/", ratingRequest);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("avstemning lagret", Severity.Success);
            Console.WriteLine($"Successfully updated rating with id: {Rating!.Id}");
            Dialog.Close();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("man kan bare gi 10 og 12 poeng én gang hver i hver kategori", Severity.Error);
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
        {
            Snackbar.Add("stemming er stengt", Severity.Error);
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
        else
        {
            Snackbar.Add("noe gikk galt, prøv igjen", Severity.Error);
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
    }

    private RatingPointsRequestDto? CreateRequest()
    {
        if (category1 is null || category2 is null || category3 is null)
        {
            Snackbar.Add("man må gi poeng i alle kategoriene", Severity.Error);
            return null;
        }
        return new RatingPointsRequestDto
        {
            Category1Points = (int)category1,
            Category2Points = (int)category2,
            Category3Points = (int)category3
        };
    }

    private void HandlePointsChange(int? oldPoints, int? newPoints, Action<int?> setter)
    {
        // skipping 9 points
        if (newPoints == 9)
        {
            if (oldPoints == 8)
            {
                setter(10);
            }
            else if (oldPoints == 10)
            {
                setter(8);
            }
            else
            {
                setter(8);
            }
        }
        // skipping 11 points
        else if (newPoints == 11)
        {
            if (oldPoints == 10)
            {
                setter(12);
            }
            else if (oldPoints == 12)
            {
                setter(10);
            }
            else
            {
                setter(10);
            }
        }
        else
        {
            setter(newPoints);
        }
    }
}