@inject HttpClient Http
@inject IToastService ToastService

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem>
                    <MudNumericField 
                        Value="@category1" 
                        Label="låt" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12" 
                        ValueChanged="(int? newPoints) => HandlePointsChange(category1, newPoints, (points) => category1 = points)"/>
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        Value="@category2" 
                        Label="opptreden" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12"
                        ValueChanged="(int? newPoints) => HandlePointsChange(category2, newPoints, (points) => category2 = points)" />
                </MudItem>
                <MudItem>
                    <MudNumericField 
                        Value="@category3" 
                        Label="mgp-faktor" 
                        Variant="Variant.Outlined" 
                        Step="1" Min="1" Max="12"
                        ValueChanged="(int? newPoints) => HandlePointsChange(category3, newPoints, (points) => category3 = points)" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="UpdateRating">stem</MudButton>
        <MudButton OnClick="Cancel">avbryt</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public RatingDto Rating { get; set; }

    private int? category1;
    private int? category2;
    private int? category3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.category1 = Rating.Category1;
        this.category2 = Rating.Category2;
        this.category3 = Rating.Category3;
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }

    private async void UpdateRating()
    {
        var ratingRequest = new RatingDto(
            Rating.Id, 
            category1, 
            category2, 
            category3, 
            Rating.PlayerId
        );
        var response = await Http.PutAsJsonAsync<RatingDto>("https://localhost:7195/api/Ratings/", ratingRequest); // TODO: automatically parse url
        if (response.IsSuccessStatusCode)
        {
            Rating = await response.Content.ReadFromJsonAsync<RatingDto>();
            ToastService.ShowSuccess("avstemning lagret");
            Console.WriteLine($"Successfully updated rating with id: {Rating!.Id}");
            Dialog.Close(DialogResult.Ok(true));
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            ToastService.ShowError("man kan gi 1-8, 10 eller 12 poeng, og man kan kun gi 10 og 12 poeng én gang i hver kategori");
            Console.WriteLine($"Failed to update rating");
        }
        else
        {
            ToastService.ShowError("noe gikk galt, prøv igjen");
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
    }

    private void HandlePointsChange(int? oldPoints, int? newPoints, Action<int?> setter)
    {
        Console.WriteLine("********************************************"); // TODO: remove console logging
        Console.WriteLine($"Previous values are: cat 1: {category1}, cat 2: {category2}, cat 3: {category3}");
        Console.WriteLine($"Trying to change {oldPoints} to {newPoints}");
        // skipping 9 points
        if (newPoints == 9)
        {
            if (oldPoints == 8)
            {
                setter(10);
            }
            else if (oldPoints == 10)
            {
                setter(8);
            }
            else
            {
                setter(8);
            }
        }
        // skipping 11 points
        else if (newPoints == 11)
        {
            if (oldPoints == 10)
            {
                setter(12);
            }
            else if (oldPoints == 12)
            {
                setter(10);
            }
            else
            {
                setter(10);
            }
        }
        else
        {
            setter(newPoints);
        }

        Console.WriteLine($"After values are: cat 1: {category1}, cat 2: {category2}, cat 3: {category3}");
    }
}