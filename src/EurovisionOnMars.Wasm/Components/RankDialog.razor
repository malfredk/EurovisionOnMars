@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem>
                    <MudNumericField 
                        @bind-Value="rank"
                        Label="plassering"
                        Variant="Variant.Outlined"
                        Step="1" Min="minRank" Max="maxRank"/>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudIconButton 
            Variant="Variant.Filled" Color="Color.Secondary"
            Icon="@Icons.Material.Filled.Check"
            OnClick="UpdateRating">
        </MudIconButton>
        <MudIconButton 
            Variant="Variant.Filled" Color="Color.Secondary"
            Icon="@Icons.Material.Filled.Close"
            OnClick="Cancel">
        </MudIconButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter] public PlayerRatingDto Rating { get; set; }
    [Parameter] public List<PlayerRatingDto> Ratings { get; set; }

    private int rank;
    private int minRank;
    private int maxRank;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.rank = (int)Rating.Prediction.CalculatedRank!;
        SetRankLimits();
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }

    private async Task UpdateRating()
    {
        var response = await Http.PatchAsJsonAsync<int>($"/api/Ratings/{Rating.Id}/Rank", rank);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("plassering lagret", Severity.Success);
            Console.WriteLine($"Successfully updated rating with id: {Rating!.Id}");
            Dialog.Close();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
        {
            Snackbar.Add("stemming er stengt", Severity.Error);
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
        else
        {
            Snackbar.Add("noe gikk galt, prøv igjen", Severity.Error);
            Console.WriteLine($"Failed to update rating due to: {response.StatusCode}");
        }
    }

    private void SetRankLimits()
    {
        var samePointsSumCount = 0;
        var ratingsWithBetterRankCount = 0;

        var pointsSum = Rating.Prediction.TotalGivenPoints;
        foreach (var otherRating in Ratings)
        {
            var otherPointsSum = otherRating.Prediction.TotalGivenPoints;
            if (otherPointsSum != null
                && pointsSum == otherPointsSum)
            {
                samePointsSumCount++;
            }
            if (otherPointsSum > pointsSum)
            {
                ratingsWithBetterRankCount++;
            }
        }

        minRank = ratingsWithBetterRankCount + 1;
        maxRank = minRank + samePointsSumCount - 1;
    }
}