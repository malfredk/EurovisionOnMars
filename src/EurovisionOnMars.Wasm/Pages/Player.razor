@page "/spiller/{id:int}"

@using EurovisionOnMars.Wasm.Components

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .extra-small-icon {
        font-size: 12px;
    }
</style>

<NavigationBar PlayerId="Id"></NavigationBar>

<MudTable 
    T="RatingDto" 
    Items="@Ratings" 
    OnRowClick="HandleSelectRating"
    Breakpoint="Breakpoint.None" 
    Hover=true RowClass="cursor-pointer">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel 
                SortBy="new Func<RatingDto, object>(r => r.Country.Number)">
                    #
            </MudTableSortLabel>
        </MudTh>
        <MudTh>land</MudTh>
        <MudTh>
            <MudTableSortLabel 
                SortBy="new Func<RatingDto, object>(r => (r.Ranking ?? 0))">
                    <MudIcon Icon="@PODIUM_ICON"></MudIcon>
            </MudTableSortLabel>
        </MudTh>
        <MudTh>poeng</MudTh>
    </HeaderContent>
    <RowTemplate Context="rating">
        <MudTd DataLabel="nummer">@rating.Country.Number</MudTd>
        <MudTd DataLabel="land">@rating.Country.Name</MudTd>
        <MudTd DataLabel="plassering">
            @rating.Ranking
            @if (hasFinishedRating && !HasUniquePointsSum(rating))
            {
                <MudIconButton 
                    Icon="@Icons.Material.Filled.SwapVert"
                    OnClick="@(async () => await HandleRanking(rating))">
                </MudIconButton>
            }
        </MudTd>
        <MudTd DataLabel="poengsum">
            @rating.PointsSum
            @for (int tenPointer = 0; tenPointer < NumberOfSpecialPoints(rating, 10); tenPointer++)
            {
                <MudIcon Icon="@Icons.Material.Filled.StarHalf" Class="extra-small-icon"></MudIcon>
            }
            @for (int twelvePointer = 0; twelvePointer < NumberOfSpecialPoints(rating, 12); twelvePointer++)
            {
                <MudIcon Icon="@Icons.Material.Filled.Star" Class="extra-small-icon"></MudIcon>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public int Id { get; set; }
    public List<RatingDto> Ratings { get; set; } = new List<RatingDto>();

    private bool hasFinishedRating;

    const string PODIUM_ICON = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 640 512"">
        <path fill=""currentColor"" d=""M353.8 54.1L330.2 6.3c-3.9-8.3-16.1-8.6-20.4 0L286.2 54.1l-52.3 7.5c-9.3 1.4-13.3 12.9-6.4 19.8l38 37-9 52.1c-1.4 9.3 8.2 16.5 16.8 12.2l46.9-24.8 46.6 24.4c8.6 4.3 18.3-2.9 16.8-12.2l-9-52.1 38-36.6c6.8-6.8 2.9-18.3-6.4-19.8l-52.3-7.5zM256 256c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H384c17.7 0 32-14.3 32-32V288c0-17.7-14.3-32-32-32H256zM32 320c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H160c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zm416 96v64c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V416c0-17.7-14.3-32-32-32H480c-17.7 0-32 14.3-32 32z"" />
        </svg>";

    protected override async Task OnInitializedAsync()
    {
        await FetchRatings();
        SetHasFinishedRating();
    }

    private async Task HandleSelectRating(TableRowClickEventArgs<RatingDto> tableRowClickEventArgs)
    {
        var selectedRating = tableRowClickEventArgs.Item;
        var parameters = new DialogParameters<RatingDialog>();
        parameters.Add(x => x.Rating, selectedRating);

        var dialogResponse = await DialogService.ShowAsync<RatingDialog>($"{selectedRating.Country.Name}", parameters);
        var dialogResult = await dialogResponse.Result;
        if (!dialogResult.Canceled)
        {
            await FetchRatings();
            SetHasFinishedRating();
            StateHasChanged();
        }
    }

    private void SetHasFinishedRating()
    {
        hasFinishedRating = true;
        foreach (var rating in Ratings)
        {
            if (rating.Ranking == null)
            {
                hasFinishedRating = false;
                return;
            }
        }
    }

    private async Task FetchRatings()
    {
        var response = await Http.GetAsync($"/api/Ratings/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Ratings = await response.Content.ReadFromJsonAsync<List<RatingDto>>();
            Console.WriteLine($"Got ratings for player with id={Id}");
        }
        else
        {
            Snackbar.Add("noe gikk galt, prøv igjen", Severity.Error);
            Console.WriteLine($"Failed to get ratings for player with id={Id}");
        }
    }

    private int NumberOfSpecialPoints(RatingDto rating, int specialPoints)
    {
        return ConvertBoolToInt(HasGivenSpecialPoints(rating.Category1Points, specialPoints))
        + ConvertBoolToInt(HasGivenSpecialPoints(rating.Category2Points, specialPoints))
        + ConvertBoolToInt(HasGivenSpecialPoints(rating.Category3Points, specialPoints));
    }

    private int ConvertBoolToInt(bool boolValue)
    {
        return boolValue ? 1 : 0;
    }

    private bool HasGivenSpecialPoints(int? categoryPoints, int specialPoints)
    {
        return categoryPoints != null && categoryPoints == specialPoints;
    }

    private bool HasUniquePointsSum(RatingDto rating)
    {
        var pointsSum = rating.PointsSum;
        if (pointsSum == null)
        {
            return true;
        }

        foreach (var otherRating in Ratings)
        {
            var otherPointsSum = otherRating.PointsSum;
            if (otherRating.Id != rating.Id
                && otherPointsSum != null
                && pointsSum == otherPointsSum)
            {
                return false;
            }
        }
        return true;
    }

    private async Task HandleRanking(RatingDto rating)
    {
        var parameters = new DialogParameters<RankingDialog>();
        parameters.Add(x => x.Rating, rating);
        parameters.Add(x => x.Ratings, Ratings);

        var dialogResponse = await DialogService.ShowAsync<RankingDialog>($"{rating.Country.Name}", parameters);
        var dialogResult = await dialogResponse.Result;
        if (!dialogResult.Canceled)
        {
            await FetchRatings();
            StateHasChanged();
        }
    }
}